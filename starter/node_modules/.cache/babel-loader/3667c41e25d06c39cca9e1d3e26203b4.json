{"ast":null,"code":"var _jsxFileName = \"/Users/shefaasaad/Documents/Coding/react-udacity/myreads-react/starter/src/SearchInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchInput = ({\n  setShowingResults,\n  setEmptyResult\n}) => {\n  _s();\n\n  const [searchInput, setSearchInput] = useState(\"\");\n  useEffect(() => {}, [searchInput]);\n\n  const handleSearch = value => {\n    console.log({\n      value\n    });\n    resetSearchResults();\n\n    const searchForBooks = async () => {\n      const res = await BooksAPI.search(value);\n      console.log({\n        res\n      });\n\n      if (res.error) {\n        setEmptyResult(true);\n      } else {\n        setShowingResults(res);\n      }\n    };\n\n    setSearchInput(value);\n\n    if (value !== null && value !== \"\") {\n      searchForBooks();\n    }\n  };\n\n  const resetSearchResults = () => {\n    setShowingResults([]);\n    setEmptyResult(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books-input-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchInput,\n      placeholder: \"Search by title, author, or ISBN\",\n      onChange: event => handleSearch(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchInput, \"Gi7rci5B2gR31H+MckHaiLRD2YA=\");\n\n_c = SearchInput;\nexport default SearchInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchInput\");","map":{"version":3,"sources":["/Users/shefaasaad/Documents/Coding/react-udacity/myreads-react/starter/src/SearchInput.js"],"names":["useState","useEffect","BooksAPI","SearchInput","setShowingResults","setEmptyResult","searchInput","setSearchInput","handleSearch","value","console","log","resetSearchResults","searchForBooks","res","search","error","event","target"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAAD,KAA2C;AAAA;;AAC3D,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACK,WAAD,CAAX,CAAT;;AAEA,QAAME,YAAY,GAAIC,KAAD,IAAW;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,MAAAA;AAAD,KAAZ;AACAG,IAAAA,kBAAkB;;AAElB,UAAMC,cAAc,GAAG,YAAY;AACjC,YAAMC,GAAG,GAAG,MAAMZ,QAAQ,CAACa,MAAT,CAAgBN,KAAhB,CAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEG,QAAAA;AAAF,OAAZ;;AACA,UAAIA,GAAG,CAACE,KAAR,EAAe;AACbX,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD,OAFD,MAEO;AACLD,QAAAA,iBAAiB,CAACU,GAAD,CAAjB;AACD;AACF,KARD;;AAUAP,IAAAA,cAAc,CAACE,KAAD,CAAd;;AAEA,QAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,EAAhC,EAAoC;AAClCI,MAAAA,cAAc;AACf;AACF,GAnBD;;AAqBA,QAAMD,kBAAkB,GAAG,MAAM;AAC/BR,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAC,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA,2BACA;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAEC,WAFT;AAGE,MAAA,WAAW,EAAC,kCAHd;AAIE,MAAA,QAAQ,EAAGW,KAAD,IAAWT,YAAY,CAACS,KAAK,CAACC,MAAN,CAAaT,KAAd;AAJnC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA1CD;;GAAMN,W;;KAAAA,W;AA4CN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\n\nconst SearchInput = ({ setShowingResults, setEmptyResult }) => {\n    const [searchInput, setSearchInput] = useState(\"\");\n\n    useEffect(() => {}, [searchInput]);\n\n    const handleSearch = (value) => {\n      console.log({value})\n      resetSearchResults();\n  \n      const searchForBooks = async () => {\n        const res = await BooksAPI.search(value);\n        console.log({ res });\n        if (res.error) {\n          setEmptyResult(true);\n        } else {\n          setShowingResults(res);\n        }\n      };\n  \n      setSearchInput(value);\n  \n      if (value !== null && value !== \"\") {\n        searchForBooks();\n      }\n    };\n  \n    const resetSearchResults = () => {\n      setShowingResults([]);\n      setEmptyResult(false);\n    };\n\n    return (\n        <div className=\"search-books-input-wrapper\">\n        <input\n          type=\"text\"\n          value={searchInput}\n          placeholder=\"Search by title, author, or ISBN\"\n          onChange={(event) => handleSearch(event.target.value)}\n        />\n      </div>\n    )\n\n}\n\nexport default SearchInput;"]},"metadata":{},"sourceType":"module"}