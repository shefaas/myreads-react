{"ast":null,"code":"var _jsxFileName = \"/Users/shefaasaad/Documents/Coding/react-udacity/myreads-react/starter/src/SearchBooks.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport BooksGrid from \"./BooksGrid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBooks = ({\n  shelvedBooks,\n  onBookshelfUpdate\n}) => {\n  _s();\n\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [showingResults, setShowingResults] = useState([]);\n  const [emptyResult, setEmptyResult] = useState(false);\n  useEffect(() => {}, [searchInput]);\n\n  const handleSearch = value => {\n    console.log({\n      value\n    });\n    resetSearchResults();\n\n    const searchForBooks = async () => {\n      const res = await BooksAPI.search(value);\n      console.log({\n        res\n      });\n\n      if (res.error) {\n        setEmptyResult(true);\n      } else {\n        setShowingResults(res);\n      }\n    };\n\n    setSearchInput(value);\n\n    if (value !== null && value !== \"\") {\n      searchForBooks();\n    }\n  };\n\n  const resetSearchResults = () => {\n    setShowingResults([]);\n    setEmptyResult(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-bar\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          className: \"close-search\",\n          to: \"/\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-books-input-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: searchInput,\n            placeholder: \"Search by title, author, or ISBN\",\n            onChange: event => handleSearch(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-results\",\n        children: [showingResults && showingResults.length > 0 && /*#__PURE__*/_jsxDEV(BooksGrid, {\n          shelvedBooks: shelvedBooks,\n          searchBooks: showingResults,\n          onBookshelfUpdate: onBookshelfUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), emptyResult && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"search-no-results\",\n          children: \"There is no results for the query keywords\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBooks, \"lNPUkA+ku3q31und/sxYxK0dzPU=\");\n\n_c = SearchBooks;\nSearchBooks.propTypes = {\n  shelvedBooks: PropTypes.array.isRequired,\n  onBookshelfUpdate: PropTypes.func\n};\nexport default SearchBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBooks\");","map":{"version":3,"sources":["/Users/shefaasaad/Documents/Coding/react-udacity/myreads-react/starter/src/SearchBooks.js"],"names":["useState","useEffect","Link","PropTypes","BooksAPI","BooksGrid","SearchBooks","shelvedBooks","onBookshelfUpdate","searchInput","setSearchInput","showingResults","setShowingResults","emptyResult","setEmptyResult","handleSearch","value","console","log","resetSearchResults","searchForBooks","res","search","error","event","target","length","propTypes","array","isRequired","func"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport * as BooksAPI from \"./BooksAPI\";\nimport BooksGrid from \"./BooksGrid\";\n\nconst SearchBooks = ({ shelvedBooks, onBookshelfUpdate }) => {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [showingResults, setShowingResults] = useState([]);\n  const [emptyResult, setEmptyResult] = useState(false);\n\n  useEffect(() => {}, [searchInput]);\n\n  const handleSearch = (value) => {\n    console.log({value})\n    resetSearchResults();\n\n    const searchForBooks = async () => {\n      const res = await BooksAPI.search(value);\n      console.log({ res });\n      if (res.error) {\n        setEmptyResult(true);\n      } else {\n        setShowingResults(res);\n      }\n    };\n\n    setSearchInput(value);\n\n    if (value !== null && value !== \"\") {\n      searchForBooks();\n    }\n  };\n\n  const resetSearchResults = () => {\n    setShowingResults([]);\n    setEmptyResult(false);\n  };\n\n  return (\n    <div>\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link className=\"close-search\" to=\"/\">\n            Close\n          </Link>\n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              value={searchInput}\n              placeholder=\"Search by title, author, or ISBN\"\n              onChange={(event) => handleSearch(event.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          {showingResults && showingResults.length > 0 && (\n            <BooksGrid\n              shelvedBooks={shelvedBooks}\n              searchBooks={showingResults}\n              onBookshelfUpdate={onBookshelfUpdate}\n            />\n          )}\n          {emptyResult && (\n            <p className=\"search-no-results\">\n              There is no results for the query keywords\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nSearchBooks.propTypes = {\n  shelvedBooks: PropTypes.array.isRequired,\n  onBookshelfUpdate: PropTypes.func,\n};\n\nexport default SearchBooks;\n"]},"metadata":{},"sourceType":"module"}