{"ast":null,"code":"var _jsxFileName = \"/Users/shefaasaad/Documents/Coding/react-udacity/myreads-react/starter/src/BooksGrid.js\";\nimport PropTypes from \"prop-types\";\nimport Book from \"./Book\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BooksGrid = ({\n  shelvedBooks,\n  searchBooks,\n  onBookshelfUpdate\n}) => {\n  const mergeShelfData = () => {\n    const searchBooksWithShelfData = [];\n    shelvedBooks.map(shelvedBook => {\n      for (const searchBook of searchBooks) {\n        console.log(\"Book: \", {\n          searchBook\n        });\n\n        if (searchBook.id === shelvedBook.id) {\n          return searchBooksWithShelfData.push({ ...searchBook,\n            shelf: shelvedBook.shelf\n          });\n        }\n\n        return searchBooksWithShelfData.push(searchBook);\n      }\n    });\n    return searchBooksWithShelfData;\n  };\n\n  if (searchBooks) console.log(mergeShelfData());\n  return /*#__PURE__*/_jsxDEV(\"ol\", {\n    className: \"books-grid\",\n    children: !searchBooks ? shelvedBooks.map(book => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Book, {\n          book: book,\n          onBookshelfUpdate: onBookshelfUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this)\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this);\n    }) : mergeShelfData().map(book => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Book, {\n          book: book,\n          onBookshelfUpdate: onBookshelfUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BooksGrid;\nBooksGrid.propTypes = {\n  shelvedBooks: PropTypes.array.isRequired,\n  searchBooks: PropTypes.array,\n  onBookshelfUpdate: PropTypes.func\n};\nexport default BooksGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"BooksGrid\");","map":{"version":3,"sources":["/Users/shefaasaad/Documents/Coding/react-udacity/myreads-react/starter/src/BooksGrid.js"],"names":["PropTypes","Book","BooksGrid","shelvedBooks","searchBooks","onBookshelfUpdate","mergeShelfData","searchBooksWithShelfData","map","shelvedBook","searchBook","console","log","id","push","shelf","book","propTypes","array","isRequired","func"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,WAAhB;AAA6BC,EAAAA;AAA7B,CAAD,KAAsD;AAEtE,QAAMC,cAAc,GAAG,MAAM;AAC3B,UAAMC,wBAAwB,GAAG,EAAjC;AACAJ,IAAAA,YAAY,CAACK,GAAb,CAAkBC,WAAD,IAAiB;AAC9B,WAAK,MAAMC,UAAX,IAAyBN,WAAzB,EAAsC;AAClCO,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB;AAACF,UAAAA;AAAD,SAAtB;;AACA,YAAIA,UAAU,CAACG,EAAX,KAAkBJ,WAAW,CAACI,EAAlC,EAAsC;AAClC,iBAAON,wBAAwB,CAACO,IAAzB,CAA8B,EAAE,GAAGJ,UAAL;AAAiBK,YAAAA,KAAK,EAAEN,WAAW,CAACM;AAApC,WAA9B,CAAP;AACD;;AACD,eAAOR,wBAAwB,CAACO,IAAzB,CAA8BJ,UAA9B,CAAP;AACL;AACJ,KARD;AASA,WAAOH,wBAAP;AACD,GAZD;;AAcA,MAAIH,WAAJ,EACAO,OAAO,CAACC,GAAR,CAAYN,cAAc,EAA1B;AAEA,sBACE;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA,cACG,CAACF,WAAD,GACGD,YAAY,CAACK,GAAb,CAAkBQ,IAAD,IAAU;AACzB,0BACE;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEA,IAAZ;AAAkB,UAAA,iBAAiB,EAAEX;AAArC;AAAA;AAAA;AAAA;AAAA;AADF,SAAUW,IAAI,CAACH,EAAf;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAND,CADH,GAQGP,cAAc,GAAGE,GAAjB,CAAsBQ,IAAD,IAAU;AAC7B,0BACE;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEA,IAAZ;AAAkB,UAAA,iBAAiB,EAAEX;AAArC;AAAA;AAAA;AAAA;AAAA;AADF,SAAUW,IAAI,CAACH,EAAf;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAND;AATN;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAtCD;;KAAMX,S;AAwCNA,SAAS,CAACe,SAAV,GAAsB;AACpBd,EAAAA,YAAY,EAAEH,SAAS,CAACkB,KAAV,CAAgBC,UADV;AAEpBf,EAAAA,WAAW,EAAEJ,SAAS,CAACkB,KAFH;AAGpBb,EAAAA,iBAAiB,EAAEL,SAAS,CAACoB;AAHT,CAAtB;AAMA,eAAelB,SAAf","sourcesContent":["import PropTypes from \"prop-types\";\n\nimport Book from \"./Book\";\n\nconst BooksGrid = ({ shelvedBooks, searchBooks, onBookshelfUpdate }) => {\n\n  const mergeShelfData = () => {\n    const searchBooksWithShelfData = [];\n    shelvedBooks.map((shelvedBook) => {\n        for (const searchBook of searchBooks) {\n            console.log(\"Book: \", {searchBook})\n            if (searchBook.id === shelvedBook.id) {\n                return searchBooksWithShelfData.push({ ...searchBook, shelf: shelvedBook.shelf });\n              }\n              return searchBooksWithShelfData.push(searchBook);\n        }\n    });\n    return searchBooksWithShelfData;\n  }\n\n  if (searchBooks)\n  console.log(mergeShelfData())\n\n  return (\n    <ol className=\"books-grid\">\n      {!searchBooks\n        ? shelvedBooks.map((book) => {\n            return (\n              <div key={book.id}>\n                <Book book={book} onBookshelfUpdate={onBookshelfUpdate} />\n              </div>\n            );\n          })\n        : mergeShelfData().map((book) => {\n            return (\n              <div key={book.id}>\n                <Book book={book} onBookshelfUpdate={onBookshelfUpdate} />\n              </div>\n            );\n          })}\n    </ol>\n  );\n};\n\nBooksGrid.propTypes = {\n  shelvedBooks: PropTypes.array.isRequired,\n  searchBooks: PropTypes.array,\n  onBookshelfUpdate: PropTypes.func,\n};\n\nexport default BooksGrid;\n"]},"metadata":{},"sourceType":"module"}