{"ast":null,"code":"var _jsxFileName = \"/Users/shefaasaad/Documents/Coding/react-udacity/myreads-react/starter/src/BooksGrid.js\";\nimport PropTypes from \"prop-types\";\nimport Book from \"./Book\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BooksGrid = ({\n  shelvedBooks,\n  searchBooks,\n  onBookshelfUpdate\n}) => {\n  const searchBooksWithShelfData = shelvedBooks.map(shelvedBook => {\n    for (const searchBook of searchBooks) {\n      console.log(\"Book: \", {\n        searchBook\n      });\n\n      if (searchBook.id === shelvedBook.id) {\n        return { ...searchBook,\n          shelf: shelvedBook.shelf\n        };\n      }\n\n      return searchBook;\n    }\n  });\n  if (searchBooks) console.log(searchBooksWithShelfData);\n  return /*#__PURE__*/_jsxDEV(\"ol\", {\n    className: \"books-grid\",\n    children: !searchBooks ? shelvedBooks.map(book => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Book, {\n          book: book,\n          onBookshelfUpdate: onBookshelfUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this)\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }, this);\n    }) : searchBooksWithShelfData.map(book => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Book, {\n          book: book,\n          onBookshelfUpdate: onBookshelfUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this)\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BooksGrid;\nBooksGrid.propTypes = {\n  shelvedBooks: PropTypes.array.isRequired,\n  searchBooks: PropTypes.array,\n  onBookshelfUpdate: PropTypes.func\n};\nexport default BooksGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"BooksGrid\");","map":{"version":3,"sources":["/Users/shefaasaad/Documents/Coding/react-udacity/myreads-react/starter/src/BooksGrid.js"],"names":["PropTypes","Book","BooksGrid","shelvedBooks","searchBooks","onBookshelfUpdate","searchBooksWithShelfData","map","shelvedBook","searchBook","console","log","id","shelf","book","propTypes","array","isRequired","func"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,WAAhB;AAA6BC,EAAAA;AAA7B,CAAD,KAAsD;AAEtE,QAAMC,wBAAwB,GAC5BH,YAAY,CAACI,GAAb,CAAkBC,WAAD,IAAiB;AAC9B,SAAK,MAAMC,UAAX,IAAyBL,WAAzB,EAAsC;AAClCM,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB;AAACF,QAAAA;AAAD,OAAtB;;AACA,UAAIA,UAAU,CAACG,EAAX,KAAkBJ,WAAW,CAACI,EAAlC,EAAsC;AAClC,eAAO,EAAE,GAAGH,UAAL;AAAiBI,UAAAA,KAAK,EAAEL,WAAW,CAACK;AAApC,SAAP;AACD;;AACD,aAAOJ,UAAP;AACL;AACJ,GARD,CADF;AAUA,MAAIL,WAAJ,EACAM,OAAO,CAACC,GAAR,CAAYL,wBAAZ;AAEA,sBACE;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA,cACG,CAACF,WAAD,GACGD,YAAY,CAACI,GAAb,CAAkBO,IAAD,IAAU;AACzB,0BACE;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEA,IAAZ;AAAkB,UAAA,iBAAiB,EAAET;AAArC;AAAA;AAAA;AAAA;AAAA;AADF,SAAUS,IAAI,CAACF,EAAf;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAND,CADH,GAQGN,wBAAwB,CAACC,GAAzB,CAA8BO,IAAD,IAAU;AACrC,0BACE;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEA,IAAZ;AAAkB,UAAA,iBAAiB,EAAET;AAArC;AAAA;AAAA;AAAA;AAAA;AADF,SAAUS,IAAI,CAACF,EAAf;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAND;AATN;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAlCD;;KAAMV,S;AAoCNA,SAAS,CAACa,SAAV,GAAsB;AACpBZ,EAAAA,YAAY,EAAEH,SAAS,CAACgB,KAAV,CAAgBC,UADV;AAEpBb,EAAAA,WAAW,EAAEJ,SAAS,CAACgB,KAFH;AAGpBX,EAAAA,iBAAiB,EAAEL,SAAS,CAACkB;AAHT,CAAtB;AAMA,eAAehB,SAAf","sourcesContent":["import PropTypes from \"prop-types\";\n\nimport Book from \"./Book\";\n\nconst BooksGrid = ({ shelvedBooks, searchBooks, onBookshelfUpdate }) => {\n\n  const searchBooksWithShelfData =\n    shelvedBooks.map((shelvedBook) => {\n        for (const searchBook of searchBooks) {\n            console.log(\"Book: \", {searchBook})\n            if (searchBook.id === shelvedBook.id) {\n                return { ...searchBook, shelf: shelvedBook.shelf };\n              }\n              return searchBook;\n        }\n    });\n  if (searchBooks)\n  console.log(searchBooksWithShelfData)\n\n  return (\n    <ol className=\"books-grid\">\n      {!searchBooks\n        ? shelvedBooks.map((book) => {\n            return (\n              <div key={book.id}>\n                <Book book={book} onBookshelfUpdate={onBookshelfUpdate} />\n              </div>\n            );\n          })\n        : searchBooksWithShelfData.map((book) => {\n            return (\n              <div key={book.id}>\n                <Book book={book} onBookshelfUpdate={onBookshelfUpdate} />\n              </div>\n            );\n          })}\n    </ol>\n  );\n};\n\nBooksGrid.propTypes = {\n  shelvedBooks: PropTypes.array.isRequired,\n  searchBooks: PropTypes.array,\n  onBookshelfUpdate: PropTypes.func,\n};\n\nexport default BooksGrid;\n"]},"metadata":{},"sourceType":"module"}